
# unit01.jx -- basic JXON tests (no threads)

# NOTE (assert arg1) is equivalent to (assert arg1 null)

(assert true true);
(assert false false);
(assert false [eq true false]);
(assert false [eq false true]);

# no pre-defined symbols should be returned by symbols 

(assert {} (symbols false));

# identity

(assert true [identical null null]);
(assert true [identical true true]);
(assert true [identical false false]);
(assert false [identical 1 1.0]);
(assert true  [identical "take" "take"]);
(assert false [identical true 1]);
(assert false [identical true 0]);
(assert false [identical false 1]);
(assert false [identical false 0]);
(assert false [identical a b]);
(assert true  [identical a a]);

# equality

(assert false [eq null false]);
(assert false [eq null 0]);
(assert false [eq null true]);

(assert true  [eq false 0]);
(assert true  [eq false 0.0]);
(assert true  [eq true 1]);
(assert true  [eq true 1.0]);
(assert false [eq false 1]);
(assert false [eq false 1.0]);
(assert false [eq true 0]);
(assert false [eq true 0.0]);

(assert false [eq false ""]);
(assert false [eq true "1"]);

(assert false [eq false a]);
(assert false [eq false 1]);
(assert false [eq false 1.0]);
(assert false [eq false "1"]);

(assert false [eq false []]);

(assert true [not ""]);
(assert false [not "0"]);

(assert true  [not []]);
(assert false [not [0]]);

(assert true  [not {}]);
(assert false [not {0:0}]);

# numerical comparison

(assert false [eq 1 0]);
(assert true [eq 1 1 ]);
(assert true [eq 1 1.0]);
(assert false [eq 1.0 2.0]);

# string comparison

(assert true [eq "take" "take"]);

(assert {} (symbols false));

(assert [def fn null _]);
(assert [1] [fn 1]);
(assert [del fn]);

(assert [raw [fn 1]] [fn 1]);
(assert [raw y] y);

(assert [def fn null [set y _]]);
(assert [fn]);

(assert y []);
(assert [fn 9]);
(assert y [9]);
(assert [del y]);
(assert [del fn]);

(assert {} (symbols false));

# basic namespace actions: get, set, has, del, take

(assert (set name 1))
(assert 1 (get name));
(assert true (has name))
(assert (del name))
(assert name name)
       
(assert (set name 2))
(assert 2 (take name))
(assert name name)

(assert {} (symbols false));


# functions with {} args use their own private namespace
# with the _ identifier for the payload 

(assert {} (symbols false));
(assert [def fn {} [set y_]]);
(assert [raw y] y);

(assert [del fn]);

# ======================================================================
# - LISP-like functional expression definition "defun" and evaluation with a
#   conventional ordinary argument list

(assert (defun my_expr [x y z] (x y z)))

(assert [1,2,3] (my_expr 1 2 3))

# - Python-like code definition "def" and evaluation using an ordinary
#   argument list.

(assert (def my_code [x y z] (x y z)))

(assert 3 (my_code 1 2 3))

(assert (del my_code))
(assert (del my_expr))

# ======================================================================
# - List manipulations, assuming that the list is bound to a top-level
# symbol.  NOTE: Jenarix list indices are zero-based (like C/Python)

#   - from front: shift, unshift

(assert (set x [2,3]))
(assert (unshift x 4))
(assert [4,2,3] x)

#   - from end: pop, push & append (synonyms), 

(assert (append x 6))
(assert [4,2,3,6] x)

#   - copying an entry: get

(assert 4 (get x 0))

#   - replacing an entry: set

(assert (set x 3 5))

(assert [4,2,3,5] x)

#   - removing and returning: take

(assert 2 (take x 1))

#   - deleting an entry without returning: del

(assert (del x 0))
(assert [3,5] x)

#   - getting the size of a list

(assert 2 (size x));
 
#
# Jason's JXON Test Book
#

#############################################################################
#
# 1.0  Simple types: boolean & existance
#
##############################################################################

true;
(not false);
(eq true true);
(eq null null);
(eq false false);
(not (eq false true));
(not (eq false null));
(not (eq true null));
(not (eq null ""));
(not (eq true ""));
(not (eq false ""));
(not (eq null ()));
(not (eq true ()));
(not (eq false ()));
(not (eq null -1));
(not (eq null 0));
(not (eq null 1));
(not (eq null 1e5));


##############################################################################
#
# 1.1 -- Simple Numeric Types
#
##############################################################################

# 1.1.1 Numerical In/equality
(eq 1 1);
(not (eq 1 2));
(not (eq -1 1));
(eq 1.1 1.1);
(not (eq 1.1 1.0));
(not (eq 1.1 1));

# 1.1.2 -- Numerical ordering
# 1.1.2.1 -- less than or equal: le
(le 1 2);
(le 1.1 1.2);
(le -1 10);

# 1.1.2.2 -- gt
(gt 2 1);
(gt 2.2 1.1);
(gt 1e4 1e3);

# 1.1.2.3 -- lt
(lt 1 2);
(lt 1e4 1e5);
(lt -1 1);
(lt -1 0);

# 1.1.2.4 -- ge
(ge 3 1);
(ge 3 -1);
(ge 1.3 1.2);
(ge 1e4 1e2);

# 1.1.3 -- operations on numbers
# 1.1.3.1 -- addition
(eq (add 1 1) 2);
(eq (add -1 1) 0);
(eq (add 1.0 1.0) 2.0);
(eq (add 1.0 1.0) 2);
(eq (add 1e3 1e3) 2e3);
(eq (add 100 -200) -100);

# 1.1.3.2 -- subtraction
(eq (sub 1 1) 0);
(eq (sub 1 1) 0.0);
(eq (sub 200 100) 100);
(eq (sub -100 -200) 100);
(eq (sub 100 -200) 300);
(eq (sub 400 200) 200);
(eq (sub 2e3 1e3) 1e3);

# 1.1.3.3 -- mult
(eq (mul 2 2) 4);
(eq (mul -2 2) -4);
(eq (mul 0.5 0.5) 0.25);
(eq (mul 1 0) 0);
(eq (mul 1 0) 0.0);
(eq (mul 1 -0) 0);
(eq (mul 1.0 -4) -4);
(eq (mul 0 0) 0);
(eq (mul 1e2 1e2) 1e4);

# 1.1.3.4 -- div
(eq (div 2 1) 2);
(eq (div -100 2) -50);
(eq (div -10 -2) 5);

# 1.1.3.5 -- mod
(eq (mod 4 2) 0);
(eq (mod 3 2) 1);


##############################################################################
#
# 1.2 Simple Strings
#
##############################################################################

# 1.2.1 Single quoted
(eq "A" "A");
(not (eq "A" "a"));

# 1.2.2 Case sensitivity
(not (eq "Foo" "foo"));
# true
(eq "FoO" "FoO");



##############################################################################
#
# 1.3 Containers
#
##############################################################################
#
# 1.3.1 -- lists
(eq () ());
(eq () []);
(not (eq () [1]));
(not (eq [-2] ()));
(eq (range 10) (range 10));

# 1.3.2 -- nested
(eq ([][]) ([][]));
(eq [()()] [()()]);
(eq ([][]) [()()]);
(not (eq [(1)()] ([][1])));

# end Jason's stuff

# primitives and dictionarys are passed through unmodified

(assert 0 0);
(assert -1 -1);
(assert 1 1);
(assert 0.0 0.0);
(assert 1.0 1.0);
(assert -1.0 -1.0);
(assert "hi world" "hi world")
(assert identify identify)
(assert {} {})
(assert {1:2} {1:2})
(assert {1:2,3:4} {1:2,3:4})
(assert {1:[2,3]} {1:[2,3]})

# top-level lists are iterated -- only the last element is returned

(assert [] [])
(assert [[]] [[]])
(assert [[1,2]] [[1,2]])

# lists with identifiers which resolve to code are executed

(assert [set x 1])
(assert 1 [get x])
(assert [set x 2])
(assert 2 [get x])
(assert 3 [add 1 2])

# type promotion is in

(assert 3.0 [add 1 2.0])
(assert 2 [add true true])
(assert 0 [sub true true])
(assert 1 [sub true false])

# we have looping constructs

(assert [set a 10])

(assert [set b []])

(assert [set c {}])

(assert 0 [size [get b]])

# while loop

(assert
  [ while [get a] 
    [ [append b [get a]]
      [set c [get a] 1]
      [set a [sub [get a] 1]] ]
  ]
)

(assert [10,9,8,7,6,5,4,3,2,1] (get b))

(assert (output c))

# hash comparison (order-independent of course)

(assert {1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1} (get c))

(assert 10 (size [get b]))

(assert 10 (size [get c]))

(assert [set b []])

(assert [for [set a 1] [lt [get a] 10] [set a [add [get a] 1]] [(output a) [append b [get a]]]])

(assert [1,2,3,4,5,6,7,8,9] (get b))

# do loops

(assert (set a 1))

(assert [do [set a [add 1 [get a]]] [lt [get a] 10] ])

(assert 10 [get a])

(assert [set a 1])

(assert [[[[null]]]] [[[[[do [set a [add 1 [get a]]] [lt [get a] 10] ]]]]])

(assert 10 [get a])

(assert (del a))
(assert -17 (del a))
(assert (del b))
(assert (del c))
(assert (del x))

(assert {} (symbols false))

# here's where we convince ourselves that weak (borrowed) references
# [used through as L-values] cannot leak or escape from where they're used.

# first, create a heap object

(assert [set x ["-  -  -  -  -  -  -  -"]])

# now see what happens when we try to get a borrowed reference

(assert ["-  -  -  -  -  -  -  -"] x)

(assert (["-  -  -  -  -  -  -  -"]) [x]);

(assert [["-  -  -  -  -  -  -  -"],["-  -  -  -  -  -  -  -"]] [x,x])

(assert [["-  -  -  -  -  -  -  -"],[["-  -  -  -  -  -  -  -"]]] [x [x]])

(assert [["-  -  -  -  -  -  -  -"],[["-  -  -  -  -  -  -  -"]],
        [[["-  -  -  -  -  -  -  -"]]]] [x [x] [[x]]]);

(assert ["-  -  -  -  -  -  -  -"] x)

(assert [append x 1]);

(assert ["-  -  -  -  -  -  -  -",1] x)

(assert [append x x])

(assert ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1]] [get x])

(assert [append x [get x]])

(assert ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1],
        ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1]]] [get x])

(assert [set y x])

(assert ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1],
        ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1]]] [get y])

(assert [del x])

(assert ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1],
        ["-  -  -  -  -  -  -  -",1,["-  -  -  -  -  -  -  -",1]]] [get y])


# functions with single ident args use their own private namespace 
# but receive the entire payload in one symbol

# functions with [ident ...] args have only positional arguments

# functions with [[ident ...],{ident:default,...}] have both a keyword
# -based default (namespace) and take optional positional args.

# scopeless function behavior (arguments go into _)

(assert (set a [1,2,3,4]))
(assert (def fn null [(output _) (get (_ 0) 1)]))
(assert 2 (fn a))

# container emptyness testing

(assert true [test [1,2,{3:4}] true false])

(assert false [test [] true false])

(assert true [test {1:2} true false])

(assert false [test {} true false])

# not this that type of construct does not work because get expects an
# indentifier (simple or compound)

(assert [get [1,2,3] 1]);

(assert [unresolved symbols] [unresolved symbols])

(assert [set a [1.0]])

(assert [resize a 100 0.5])

(assert [1.0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5] a)

(assert 100 [size a]);

(assert [resize a 10])

(assert [1.0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5] [get a]);

(assert 10 [size a]);

(assert (set fn [lambda null [add [get (_ 0) 1] 2] ]))

(assert 2.5 (fn a))

# scopeless functions inherit their environment (dynamic scoping)

(assert [def test1 null [get x]])

(assert [set x 3])

(assert 3 (test1))

# scopefull function with no parameter list

(assert [def test1 {x:2} [get x]])

(assert 2 [test1])

(assert 8 [apply [lambda null 8]])

(assert [set a 3])


# notice how lambda returns the whole expr, unlike def which iterates
# the expr

(assert [null,9] [apply [lambda null [[set a 9] [get a]]]])

(assert (del a))
(assert (del x))
(assert (del y))
(assert (del fn))
(assert (del test1))
(assert {} (symbols false))

(assert
 (def vector_add [v0 v1] [
  (if (ne (size v0) (size v1))
    [ (output "Vector size mismatch") ]
    [ (set r [])
      (while v0 (append r (add (shift v0) (shift v1))))
      r
      ]
    )
  ])
)


(assert [3,5,7] (vector_add [1,2,3], [2,3,4]))

(assert 1000 (size (vector_add (range 1000) (range 1000))));

(assert
(def vector_add [v0 v1] [
  (if (ne (size v0) (size v1))
    [ (output "Vector size mismatch") ]
    [ (map (lambda [x y] (add x y)) v0 v1) ]
    )
  ])
)

(assert [3,5,7] (vector_add [1,2,3], [2,3,4]))

(assert 2000 (size (vector_add (range 2000) (range 2000))));

(assert (del vector_add))

# TAIL RECURSION

# with tail recursion, result is 20

(assert (def tail_test [x] [ (output x) (test (lt x 20) (tail (add x 1)) x) x]))

(assert 20 (tail_test 10))

# without tail recursion, result is 10

(assert (def tail_test [x] [ (output x) (test (lt x 20) (tail_test (add x 1)) x) x] ))

(assert 10 (tail_test 10))

(assert (del tail_test));
(assert {} (symbols false));

# SPECIAL FORMS

# 'quote' returns the first argument after prebinding but before evaluation

(assert (quote (add 1 2)) (quote (add 1 2)))

# 'eval' is the antidote to quote

(assert 3 (eval (quote (add 1 2))))

# 'raw' returns the first argument without performing any prebinding or evaluation
# what you get from raw is essentially source code

(assert (raw (add 1 2)) (raw (add 1 2)))

# 'bind' converts the output of raw into prebound code

(assert (quote (add 1 2)) (bind (raw (add 1 2))));

# when combined with eval, you get the full JXON evaluation pipeline

(assert 3 (eval (bind (raw (add 1 2)))))

# result: 3

# the special form 'pass' simply passes the value through (can be used
# to evaluate forms which return functions without calling the
# functions and without using get)

(assert (set fn (lambda [x] 1)))

(assert 1 (fn));

(assert (output (pass fn)));

# output: fn`0x500d50

# 'nop' gets excised when binding is performed... upon binding, the
# first argument to nop replaces it

(assert (quote (a,b,c)) (quote (nop (a b c))))

# result: [ (`resolve a), (`resolve b),
#           (`resolve c)]

(assert (del fn))
(assert {} (symbols false))

# closure01

# Jenarix functions statically close on free variables using the
# surrounding scope

(assert (set x [1,2,3]))

(assert (set z [3,4,5]))

(assert (def myfn [[x,y],{y:[2,3,4]}] [(x,y,z)] ));

(assert (output (impl myfn)));

(assert [ [1, 2, 3], [2, 3, 4],[3, 4, 5]] (myfn))

(assert [1, [2, 3, 4], [3, 4, 5]] (myfn 1))

(assert [1,2, [3, 4, 5]] (myfn 1 2))

(assert (del x))
(assert (del z))
(assert (del myfn))

(assert {} (symbols false))

# closure02

# another illustration of how Jenarix closures work

(assert (def fnbuilder [y] (lambda [] y)))

(assert (set newfn (fnbuilder 2)))

(assert (output (symbols false)))

(assert 2 (newfn))

(assert (set v [1,2]))

(assert (set newfn (fnbuilder v)))

(assert [1,2] (newfn))

# note that value of v was closed on (copied) at the time of function
# creation.  Changing v later has no effect on the function.

(assert (append v 3))

(assert [1,2,3] v)

(assert [1,2] (newfn))

(assert (output (symbols false)))
(assert (del v))
(assert (del fnbuilder))
(assert (del newfn))
(assert (output (symbols false)))
(assert {} (symbols false))

# closure03

(assert (def vector.add [v1 v2] [
  [(v1 0)
    (map (lambda [x y] (add x y)) (v1 1) (v2 1)) ]
  ]));

(assert (output (impl vector.add)))

(assert (output (symbols false)))
 
(assert (entity VectorBase null null {add:vector.add}) VectorBase)

(assert (entity Vector VectorBase null null) Vector)

# referring to Vector inside the function is sufficient to create the
# closure

(assert (def myfn [a,b] ([Vector], (a add b))))

# notice how the Vector definition is in the function's implementation

(assert (output (impl myfn)))

# if we create some vector instances

(assert (set v1 [Vector, [1 2 3]]))

(assert (set v2 [Vector, [2,3,4]]))

# both the function and the local entity methods work on them

(assert [Vector,[3,5,7]] (myfn v1 v2))

(assert [Vector,[3,5,7]] (v1 add v2))

# strictly speaking however, we can instead rely upon dynamic

# referencing of the class at the point of method invocation

(assert (def myfn2 [a,b] [(a add b)]))

(assert (output (impl myfn2)))

(assert [Vector,[3,5,7]] (myfn2 v1 v2))

# but that only works if the class is present and bound in the caller's namespace

# if we've nuked it 

(assert (del ((pass Vector))))
(assert (del Vector))

(assert (output (symbols false)))

# then that doesn't work

(assert (myfn2 v1 v2))

# whereas the function with closed entity definitions still works

(assert (output (myfn v1 v2)))

(assert (output (symbols false)))
(assert (del v1))
(assert (del v2))
(assert (del vector.add))
(assert (del vector))
(assert (del myfn2))
(assert (del myfn))

(assert (del ((pass VectorBase))))
(assert (del VectorBase))

(assert (output (symbols false)))
(assert {} (symbols false))

# continue

(assert (set a 10))

(assert 5 (while (decr a) ((output a) (test (gt a 5) (continue) a) (break))))

(assert (output (symbols false)))
(assert (del a))
(assert (output (symbols false)))
(assert {} (symbols false))

# entity02

# here's an example vector addition function


(assert {} (symbols false))

(assert (def vector_add [v1 v2] [
  [(v1 0)
    (map (lambda [x y] (add x y)) (v1 1) (v2 1))
  ]]))

(assert (entity Vector null null {add:vector_add}) Vector);

(assert (del vector_add))

(assert (set v1 [Vector, [1 2 3]]))

(assert (set v2 [Vector, [2,3,4]]))

# entity-based invocation

(assert [Vector, [3,5,7]] (v1 add v2))

# dot-based invocation

(assert [Vector, [3,5,7]] (v1.add v2))

(assert [Vector,[0.6,13,"hiyou"]]
  ([Vector, [0.3 4 "hi"]] add [Vector, [0.3 9 "you"]]));


(assert (del v1))
(assert (del v2))
(assert (del ((pass Vector))))
(assert (del Vector))
(assert {} (symbols false))

# entity03

# polymorphic functions can be created as follows

# first, we define two entity classes 

(assert (entity A) A)

(assert (entity B) B)

# then we create and populate a hash that will act as a dispatch table

(assert (set poly_disp {}))
(assert (set poly_disp A (lambda [self x] [("A called with",x)])))
(assert (set poly_disp B (lambda [self x] [("B called with",x)])))

# now we define a scopeless function that can use the hash

(assert (def poly_fn null
 (apply (get poly_disp ((get _ 0) 0)) _)));

(assert (output (impl poly_fn)));

# finally, to show off, we create one entity of each type

(assert (set a [A]))
(assert (set b [B]))

# and use the polymorphic function on those entities :)!

(assert [ ["A called with",1]](poly_fn a 1))
(assert [ ["B called with",2]] (poly_fn b 2))

(assert (del a))
(assert (del b))
(assert (del ((pass A))))
(assert (del ((pass B))))
(assert (del A))
(assert (del B))
(assert (del poly_fn))
(assert (del poly_disp))
(assert {} (symbols false));

# experimenting with dot notation for calling methods on entity

(assert (entity A null null {class_fn:(lambda [self] ("from class",(get (self 1) 2)))}) A);

(assert (set b [A, [1,2,3], {inst_fn:(lambda [self] ("from instance",(get (self 1) 2)))}]))

# the pseudo-LISP way

(assert ["from instance",3] (b inst_fn))

(assert ["from class",3] (b class_fn))

# the pseudo-Python way

(assert ["from instance",3] (b.inst_fn))

(assert ["from class",3] (b.class_fn))

(assert (del b))
(assert (del ((pass A))))
(assert (del A))
(assert {} (symbols false))


# verify access to attributes

(assert (entity Matrix) Matrix)

(assert (set mat (Matrix, [ 0 0 0 0 0 0 0 0 0 ], {dim:[3,3]})))

# conventional attribute resolution

(assert [3,3] (mat dim));

(assert (append (mat dim) 1))

# note that we've modified dim

(assert (output mat))

(assert [3,3,1] (mat dim));

# dot-based attribute resolution

(assert 1 (pop mat.dim))

(assert (output mat))

# note that in both cases, we're returned a weak reference to the
# attributes which can be directly operated upon

# a copy isn't made until we assign

(assert (set dim mat.dim))

(assert (append dim 1))

(assert [3,3,1] dim)

(assert [3,3] mat.dim)

# double-check our ability to access entity components

(assert Matrix (mat 0))
(assert [ 0 0 0 0 0 0 0 0 0 ] (mat 1))
(assert {dim:[3,3]} (mat 2))
(assert (mat 3))


(assert (del dim))
(assert (del ((pass Matrix))))
(assert (del Matrix))
(assert (del mat))
(assert {} (symbols false))

# test construction

(assert (def _method [self,x] ((self 1),x)))

(assert (entity MatrixBase null null { dim:[] , method:_method } ) MatrixBase)

(assert (del _method))

(assert (entity Matrix33f MatrixBase
  [ 1.0 0.0 0.0 
    0.0 1.0 0.0 
    0.0 0.0 1.0 ],
  {dim:[3,3]}) Matrix33f)

(assert (output (symbols false)));

# new instances can be automatically created by resolving the entity handle and then
# calling it as a function 

(assert (set m1 ((Matrix33f)) ))

(assert [Matrix33f, [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], {dim: [3, 3]}] 
  m1)

(assert (del ((pass MatrixBase))))
(assert (del MatrixBase))
(assert (del ((pass Matrix33f))))
(assert (del Matrix33f))
(assert (del m1))
(assert {} (symbols false))


# delaring an entity effectively reserves the identifier for use by the entity

(assert (entity Vector) Vector);

# result: .Vector

# Notice that two entries are created in the symbol table, one which
# binds the entity name (Vector) to the builtin entity handle
# (.Vector) and a second which binds the handle to the attribute table
# (which can be null)

(assert (output (symbols false)))

# creating an instance the manual way...

(assert (set vect1,
  [ Vector, [ 1,0,0,0,1,0,0,0,1 ],
    { take_first_two : (lambda [self] (cutout (self 1) 0 2)) }
  ]))

(assert (output vect1))

# Bound methods ends up calling the associated function

(assert [1,0] (vect1 take_first_two))

# calling an unbound method currently acts like a nop -- this should
# probably be changed to either return null or throw an error

(assert (vect1 length))

# entity-wide methods are stored in the entity definition

(assert (entity Vector null null
  { length : (lambda [self] (size (self 1))) })
  Vector)

(assert (output (symbols false)))

# result: { ..., Vector: {length:fn`0x600ed8}, ... }

# newly-defined class methods are available to all instances in the namespace

(assert 7 (vect1 length))

# result: 7

(assert (del ((pass Vector))))
(assert (del Vector))
(assert (del vect1))
(assert {} (symbols false))

# functions returning functions

(assert (def addN [x] (lambda [y] (add x y))))

(assert (set add2 (addN 2)))

(assert 7 (add2 5))

(assert (del addN))
(assert (del add2))
(assert {} (symbols false))

# build a list

(assert (set a 2000))

(assert (set b []))

(assert null (while a (append b (decr a)) ))

(assert 2000 (get b 0))

(assert 2000 (size b))

# build a hash

# build a million-element hash as fast as you can!

(assert (set a 1000))

(assert (set b {}))

(assert null ( while a (set b (decr a) 1) ))

(assert 1000 (size b))

(assert (del a))
(assert (del b))

# hash test

(assert (def main1 {} [
    (set n 1000)
    (set X {})
    (map (lambda null (set X [str _] _)) [range 1 [add n 1]])
    (set c 0)
    (map (lambda null (set c [add c [has X [str _]]])) [range n 0 -1])
    c
    ]
))

(assert (def main2 {} [
    (set X {})
    (for [set i 0] [lt i 1000] [set i (add i 1)] (set X [str i] i))
    (set c 0)
    (for [set i 1000] [ge i 0] [set i (sub i 1)] (set c [add c [has X [str i]]]))
    c
    ]
))

(assert 1000 (main1))
(assert 1000 (main2))

(assert (del main1))
(assert (del main2))


# confirm clean namespace

(assert {} (symbols false))

