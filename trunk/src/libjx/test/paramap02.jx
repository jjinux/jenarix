
# now we're creating a queue and sending data through that queue asynchronously

(def send_recv [sender,cnt,pipe] [
  (if sender 

    ( (while (decr cnt) (append pipe sender))
      (append pipe -1)
      (size pipe))

    ( (set wait 7)
      (while wait (test (ge (shift pipe) 0) (incr cnt) (decr wait)))
      cnt))
  ]);

(set pipe []);

# synchronizing a container disables copy semantics for the container
# and replaces it with weak references.  Thus, each function
# has the ability to read or write from the container

(synchronize pipe true);
(synchronized pipe);

(paramap send_recv [
  [true,100000,pipe] 
  [true,100000,pipe] 
  [true,100000,pipe]
  [true,100000,pipe]
  [true,100000,pipe]
  [true,100000,pipe]
  [true,100000,pipe]
  [false,0,pipe]])





