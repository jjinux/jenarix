# Some notes:
# - taking this derived-entity approach, pseudo-OOP, is it really best/attractive?
#   -- will look much nicer if "class" could be interpreted into this structure instead of what's here so far
#   -- the test/node??.jx examples don't take an OOP approach, instead take approach just like Erlang sandbox implementation
# - having a comment line start after code, sharing the same line, triggers a curious parsing bug & error
# - having a split line in the entity declaration's dict of objects triggers a parsing error
#
# TODO:
# - try to finish building out this pseudo-OOP approach without defining handling for "class" to see how it looks
# - start over with attempt01.py and take non-OOP approach like in Erlang sandbox implementation
# - move on to attempt02.py
# - fix bugs mentioned in above notes

def basenode.__init__(self, host):
    print "DBG in basenode.__init__", self, host
    self._host = host
    self._network = []
    if host != self:
        self._host._connect( self.error, host.error) 
    
def basenode.input(self, payload):
    self._enqueue( self.input, payload)
    
def basenode.output(self, payload):
    self._host._enqueue( self.output, payload)

def basenode.error(self, payload):
    self._host._enqueue( self.error, payload)

def basenode._connect(self, source, destination):
    self._network.append( [source, destination] )
    
def basenode._enqueue(self, source, payload):
    # will become asynchronous once we have concurrency
    for entry in self._network:
        if entry[0] == source:
            funcname = entry[1]
            funcname(payload)

def basenode._send(self, node, port, payload):
    # will become asynchronous once we have concurrency
    target_node = getattr(self, node)
    target_port = getattr(target_node, port)
    target_port(payload)
    
def basenode._call(self, node, port, payload):
    target_node = getattr(self, node)
    target_port = getattr(target_node, port)
    return target_port(payload)

entity(BaseNode, null, null, { __init__ : basenode.__init__, input : basenode.input, output : basenode.output, error : basenode.error, _connect : basenode._connect, _enqueue : basenode._enqueue, _send : basenode._send, _call : basenode._call })


def addsone.input(self, payload):
    self.output(payload + 1)
    self._host._call("nested","input",10)

entity(AddsOne, BaseNode, null, { input : addsone.input })
del addsone.input
del addsone


def negate.input(self, payload):
    self.error("some error message")
    self.output(-payload)

entity(Negate, BaseNode, null, { input : negate.input })
del negate.input
del negate


def doubles.input(self, payload):
    self.output(payload * 2)

entity(Doubles, BaseNode, null, { input : doubles.input })
del doubles.input
del doubles


def nestednetwork.__init__(self,host):
    BaseNode.__init__(self,host)

    self.negate = [Negate, []]
    self.negate.__init__(self, host)
    self._connect( self.input, self.negate.input)
    self._connect( self.negate.output, self.output)

def nestednetwork.input(self,payload):
    BaseNode.input(self,payload)

entity(NestedNetwork, BaseNode, null, { __init__ : nestednetwork.__init__, input : nestednetwork.input })
del nestednetwork.__init__
del nestednetwork.input
del nestednetwork

        
def toplevel.__init__(self,host):
    BaseNode.__init__(self,self)
    
    self.addsOne = [AddsOne, []]
    self.addsOne.__init__(self, host)
    self.doubles = [Doubles, []]
    self.doubles.__init__(self, host)
    self.nested = [NestedNetwork, []]
    self.nested.__init__(self, host)
    
    self._connect( self.input, self.addsOne.input )
    self._connect( self.input, self.doubles.input )        
    self._connect( self.addsOne.output, self.doubles.input )
    self._connect( self.doubles.output, self.nested.input )
    self._connect( self.nested.output, self.output )

def toplevel.output(self, payload):
    print "output:",payload

def toplevel.error(self, payload):
    print "error:",payload

entity(TopLevel, BaseNode, null, { __init__ : toplevel.__init__, output : toplevel.output, error : toplevel.error })
del toplevel.__init__
del toplevel.output
del toplevel.error
del toplevel


toplevelnode = [TopLevel, []]
toplevelnode.__init__(toplevelnode, None)

for number in range(1):
    toplevelnode.input(toplevelnode, number)
