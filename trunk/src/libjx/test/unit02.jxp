
# unit02.jxp -- basic Python unit tests (no threads)

a = 1

print a

# we have literals 

b = {"some key":[1,2,3], 3:"some value", "another key":"another value",8.4:0}

###print b, len(b)

print len(b)

# REMEMBER, Jenarix uses copy semantics, not reference-taking semantics, so

d = {"some key":"value"}

c = d

c["another key"] ="value"

print c

print d

# is NOT how Python works, but it is how JXON works.

# we have print

print "hello Python world!!!" " Can you hear me?"

# we have for loops (simple iterator)

for b in range(3,8):
    print b

# we have while loops

x=1

while x<9:
    x=x+1
    print x

# does simple if work?

if 0:
    print "hi"
else:
    print 1234

# we have cascading IF statements

if 0:
    print "hi"
elif 0:
    print "who"
elif 1:
    print "wow"
else:
    print 1234

# we have functions

def fn(a,b):
    print "The sum of",a,"and",b,"is",a+b

fn(1,2)

fn(3,6)

# we have map / lambda

print map(lambda x:x*x, range(10))

# but we're still missing a lot of stuff...

# in particular...

# keyword arguments

# list comphrehensions

# nested loops

a=5
b=5
c=5
while a:
    a = a - 1
    b = a
    while b:
        c = b
        b = b - 1
        while c:
            c = c - 1
            print a,b,c
        while c:
            pass
        a = 0
    print b
    if 1:
       true
print b

c=2
print c
            
for a in [1,2]:
    for b in [5,6]:
        for c in [7,6]:
            print a,b,c

a=0
b=0
c=0
while a:
    while b:
        while c:
            pass

if 0:
    pass

# ordinary symbols

def fn():
    print [1,2,3]

a=fn

a()

del a

# this behavior is a little bizzare: calling an unbound (simple)
# symbol gives that symbol as the first member of an (unevalued) JXON
# invocation frame (symbol plus args)

assert([a,1,2], a(1,2))

# whereas with a compound symbol, we get null with the arguments

assert([null,3,4],a.b(3,4))

# entities and attributes

assert( entity(Base,null,[1,2,3],{x:"X",y:"Y"}), Base)

# "new" creates entity instances which have
# their own content, but inherit attributes

a=new(Base)
b=new(Base)

print a, b

print a.x, b.x

# setting attributes can be done through simple assignment

a.x=2

print a.x, b.x

print a,b

# instance content is accessed via the zero-length symbol (trailing dot)

print a.

# and can be acted upon using using builtin functions

print a..size()

# instance content can be assigned directly

a.=[2,3,4]

print a.

# and can be manipulated

append(a., 5)

print a.

a..reverse()

print a.

assert(4, a..take(1))

print a.

# derived entities can redefine attributes and include their own
# content prototype

assert( entity(Deriv, Base, [3,4,5], {x:"XX", z:"Z"}), Deriv)

a = new(Deriv)

print a.x, a.y, a.z

a.z="ZZZ"

print a.x, a.y, a.z

assert("ZZZ",a.z)

b = new(Deriv)

# notice how content is independent -- copied, not inherited

a..append(3)

print a., b.

# entity definitions with methods 

assert(
    entity(Base, null, [1,2,3], 
    { get_content: lambda self:self.,
      reverse_content: lambda self:self..reverse(),
      fill_content: lambda self,cnt,what: set(self., fill(cnt,what))
      }), Base )

a=new(Base)

print a.get_content()

a.=[4,5,6]

print a.get_content()

a.reverse_content()

print a.get_content()

a.fill_content(8,5)

print a.get_content()

del a

# one key thing to understand about jenarix is that dot notation
# cannot currently be used on intermedate results: a.b().d.e must
# instead be split up into two commands which involve binding of a
# temporary symbol which is then itself used with dot notation

a={b:lambda :{d:{e:[1,2]}}}

tmp = a.b()

print tmp.d.e

# this requirement arises from the Jenarix requirement that all
# resolved value references must refer to object which lie somewhere
# on the directed acyclic graph of the current scope (and are thus
# persistent)
