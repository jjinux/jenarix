
# Jenarix Entities resemble classes from other languages, but they are
# distinguished from classes and instances by their open, visible
# structure.

# delaring an entity effectively reserves the identifier for use by the entity

(entity Vector);

# result: .Vector

# Notice that two entries are created in the symbol table, one which
# binds the entity name (Vector) to the builtin entity handle
# (.Vector) and a second which binds the handle to the attribute table
# (which can be null)

(symbols);

# creating an instance the manual way...

(set vect1,
  [ Vector, [ 1,0,0,0,1,0,0,0,1 ],  
    { take_first_two : (lambda [self] (cutout self. 0 2)) }
  ]);

# note:  self. (self followed by a period) refers to the inner content list of the instance
 
vect1;

# result: [.Vector, [1, 0, 0, 0, 1, 0, 0, 0, 1], {take_first_two:fn`0x6010e8}]

# Bound methods ends up calling the associated function

(vect1.take_first_two);

# result: [1, 0]

# unbound attributes resolve to null

(vect1.length);

# result: null

# entity-wide methods are stored in the entity definition

(entity Vector null null
  { length : (lambda [self] (size self.)) }
  );

(symbols);

# result: { ..., Vector: {length:fn`0x600ed8}, ... }

# newly-defined class methods are available to all instances in the namespace

(vect1.length);

# result: 7

vect1;

vect1.length;








