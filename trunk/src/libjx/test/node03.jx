
# now we switch from having a dedicated thread per queue to having a single
# queue with multitple threads pulling from it

(entity JxonNodeEntity)

(set JxonNodeProto [JxonNodeEntity, [], {
  _handler : null
  _inputs : [raw [ input ]]
  _outputs : [raw [ output, error ]]
  input : (lambda [self,payload] [self._handler input payload])
  output : (lambda [self,x] [output x])
  error : (lambda [self,x] [error x])
  }
]);

# create a shared queue

[set queue []]
[synchronize queue]

[set result []]
[synchronize result]

# create underlying functions which waste a bunch of CPU before
# sending their payload

(def _add [self,port,payload] [
  (self.error "_add called")
  (set a 2000)
  (while (decr a))
  (self.output 
    (add 
      (take payload 1) 
      (take payload 0)))
  ]);

(def _negate [self,port,payload] [
  (self.error ("_negate called" payload))
  (set a 10000)
  (while (decr a))
  (self.output 
    (neg payload))
  ]);

(def _square [self,port,payload] [
  (self.error ("_square called" payload))
  (set a 50000)
  (while (decr a))
  (set value (mul payload payload))
  (append result value)
  ]);

# then we copy the prototype

(set nodeA JxonNodeProto)
(set nodeB JxonNodeProto)
(set nodeC JxonNodeProto)

# and bind the underlying functions

(set (nodeA 2) _handler _add)
(set (nodeB 2) _handler _negate)
(set (nodeC 2) _handler _square)

# prepare for concurrent use

[synchronize nodeA]
[synchronize nodeB]
[synchronize nodeC]

# create piping functions

(def pipeB [self,payload] [(append queue [payload nodeB])]);
(def pipeC [self,payload] [(append queue [payload nodeC])]);

(set (nodeA 2) output pipeB)
(set (nodeB 2) output pipeC)

(set FINAL_RESULT_SIZE 1000)

(def thread [master,head,queue,result] [
  (if master
    [
      (set a FINAL_RESULT_SIZE)
      (while (decr a) [(output ("sending 1+",a)) (head.input [1 a])])
      (output "master thread done")
      ]
    [
      (output "slave thread started")
      ( while 1 [
        (set packet (shift queue))
        (set target (pop packet))
        (set payload (pop packet))
        (test (ne null payload) (target.input payload))
        (test (eq null payload) 
          (if (eq (size result) FINAL_RESULT_SIZE) [(break)]))
        ])
      (output "slave thread done")
    ])
  ])

# now use parmap to run the network with a bunch of slave threads

(parmap thread [ 
  [true, nodeA, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  [false, null, queue, result]
  ])

(size result);







