
# "Entities" are the analog of traditional classes and high-level
# objects in the Jenarix runtime environment

# delaring an entity effectively reserves the word for use by the entity

(entity Vector);

# notice that two entries are created in the symbol table, one which
# binds the entity name (Vector) to the builtin entity handle
# (.Vector) and a second which binds the handle to the attribute table
# (which can be null)

(symbols);

# using an entity

(set vect1,
  [ Vector, [ 1,0,0,0,1,0,0,0,1 ],
    { get_first_two : (lambda [self] (cutout (self 1) 0 2))
      }]);

vect1;

# bound methods ends up calling the associated function

(vect1 get_first_two);

# calling an unbound method currently acts like a nop -- this should
# probably be changed to either return null or throw an error

(vect1 length);

# class-wide methods are stored in the entity class's hash table

(entity Vector
 { length : (lambda [self] (size (self 1)))
   });

(symbols);

# newly-defined class methods are available to all instances in the namespace

(vect1 length);








