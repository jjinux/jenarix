# Some notes:
# - running into problems accessing and manipulating attributes of entities (e.g. self.input resolves to self instead of to a function?)
#   -- attempted working around some of this by putting entity member variables into the data "list"
#   -- unsure if accessing issues are due to clobbering of entity structure or what
#   -- moving on to non-OOP approach for now
# - taking this derived-entity approach, pseudo-OOP, is it really best/attractive?
#   -- will look much nicer if "class" could be interpreted into this structure instead of what's here so far
#   -- the test/node??.jx examples don't take an OOP approach, instead take approach just like Erlang sandbox implementation
# - having a comment line start after code, sharing the same line, triggers a curious parsing bug & error
# - having a split line in the entity declaration's dict of objects triggers a parsing error
#
# TODO:
# - try to finish building out this pseudo-OOP approach without defining handling for "class" to see how it looks
# - start over with attempt01.py and take non-OOP approach like in Erlang sandbox implementation
# - move on to attempt02.py
# - fix bugs mentioned in above notes

def basenode.__init__(self, host):
    print "DBG in basenode.__init__", self, host
    print "B1", self
    #self._host = host
    #set(self[1], _host, host)
    self[1][_host] = host
    print "B2", self
    #self._network = []
    #set(self[1], _network, [])
    self[1][_network] = []
    print "B3", self
    if host != self:
        self._host._connect( self.error, host.error) 
    print "B4", self
    
def basenode.input(self, payload):
    self._enqueue( self.input, payload)
    
def basenode.output(self, payload):
    self._host._enqueue( self.output, payload)

def basenode.error(self, payload):
    self._host._enqueue( self.error, payload)

def basenode._connect(self, source, destination):
    #self._network.append( [source, destination] )
    print "DBG in basenode._connect", self, source, destination
    #set(self[1], _network, self._network + [[source, destination]])
    self[1][_network] = self[1][_network] + [[source, destination]]
    
def basenode._enqueue(self, source, payload):
    # will become asynchronous once we have concurrency
    print "DBG in basenode._enqueue", self, source, payload, self[1]
    for entry in self[1][_network]:
        if entry[0] == source:
            funcname = entry[1]
            funcname(payload)

def basenode._send(self, node, port, payload):
    # will become asynchronous once we have concurrency
    target_node = getattr(self, node)
    target_port = getattr(target_node, port)
    target_port(payload)
    
def basenode._call(self, node, port, payload):
    target_node = getattr(self, node)
    target_port = getattr(target_node, port)
    return target_port(payload)

entity(BaseNode, null, null, { __init__ : basenode.__init__, input : basenode.input, output : basenode.output, error : basenode.error, _connect : basenode._connect, _enqueue : basenode._enqueue, _send : basenode._send, _call : basenode._call, _host : null, _network : null })


def toplevel.__init2__(self,host):
    print "DBG in toplevel.__init__", self, host
    #BaseNode.__init__(self,self)
    self.__init__(self)
    print "DBG next in toplevel.__init__", self, host
    
    #self.addsOne = [AddsOne, []]
    #self.addsOne.__init__(host)
    #self.doubles = [Doubles, []]
    #self.doubles.__init__(host)
    #self.nested = [NestedNetwork, []]
    #self.nested.__init__(host)
    
    print "B", self
    print "B", symbols(self)
    print "DBG next2 in toplevel.__init__", self, host
    self._connect( self.input, self.output )
    print "DBG next3 in toplevel.__init__", self, host
    #self._connect( self.input, self.addsOne.input )
    #self._connect( self.input, self.doubles.input )        
    #self._connect( self.addsOne.output, self.doubles.input )
    #self._connect( self.doubles.output, self.nested.input )
    #self._connect( self.nested.output, self.output )

def toplevel.output(self, payload):
    print "output:",payload

def toplevel.error(self, payload):
    print "error:",payload

entity(TopLevel, BaseNode, null, { __init2__ : toplevel.__init2__, output : toplevel.output, error : toplevel.error })
del toplevel.__init2__
del toplevel.output
del toplevel.error
del toplevel


toplevelnode = [TopLevel, {}]
toplevelnode.__init2__(None)

for number in range(1):
    toplevelnode.input(toplevelnode, number)
#toplevelnode
#symbols(toplevelnode)
