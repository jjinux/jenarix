
# unit03.jx JXON threading tests

(assert (def delay [id,x] (
  (set sum 0) 
  (while (decr x) (incr sum (idiv x 100)))
  (id,sum))));

(assert (set result (paramap delay [
  [1,1000]
  [2,2000] 
  [3,3000]
  [4,4000]
  [5,5000]
  [6,6000]
  [7,7000]
  [8,8000]])));

(assert [[1,4500],[2,19000],[3,43500],[4,78000],[5,122500],[6,177000],[7,241500],[8,316000]] 
        result);

(assert (del delay))
(assert (del result))

(assert {} (symbols))

# now we're creating a queue and sending data through the queue asynchronously

# synchronizing a container disables copy semantics for the container
# and replaces it with weak reference taking.  This will enable each 
# functions to close on and reference the same container

(assert (set pipe []))

(assert (synchronize pipe true))
(assert true (synchronized pipe))

(assert (def send_recv [sender,cnt] [
  (if sender 
    ( (while (decr cnt) (append pipe false))
      (append pipe true)
      (size pipe))
    ( (set wait 7)
      (while wait [(set payload (shift pipe))
                   (test (eq payload false) (incr cnt))
                   (test (eq payload true) (decr wait))])
      cnt))
  ]))

(assert (output (impl send_recv)))

(assert (set result
  (paramap send_recv [
    [true,1000] 
    [true,1000] 
    [true,1000]
    [true,1000]
    [true,1000]
    [true,1000]
    [true,1000]
    [false,0]
  ])))

(assert 8 (size result))

(assert 7000 (get result -1))

(assert (del send_recv))
(assert (del pipe))
(assert (del result))

(assert {} (symbols))

