Jenarix Project Progress Notes


BRIEF OVERVIEW

The goal with Jenarix is to provide a concurrency framework upon which high quality scientific visualization and computation applications may be developed to take advantage of the proliferation of multi-core processing architectures.  Jenarix has taken the path of permitting mutable objects in distinct namespaces where no two concurrently executing threads can directly access or corrupt the other's objects.  Expanding on this is Jenarix Networks which establishes dataflow graphs containing nodes, each with its own distinct namespace and capable of independent, stateless execution.  Jenarix Networks offers concurrency through the pipelined execution of individual nodes in the graph (aka Jenarix Network).


DESCRIPTION OF WHAT WORKS

Parsers have been created to process various kinds of languages into the intermediate Lisp-like Jenarix code, which is then (optionally) executed by the Jenarix interpreter.  The most mature of these is 'jx' which parses Jenarix input.  Less mature but still very, very helpful to the experienced python coder is 'jxp' which parses a large subset of python language syntax as its input.  Still a work in-progress is 'jxn' which parses Jenarix Network definitions into Jenarix entities -- currently, invocation of jxn will produce syntactically correct jenarix code which can be captured into a file and combined with other jenarix code implementing some computational task for subsequent re-submission to the jenarix code interpreter, but the jenarix code produced by jxn currently does nothing by itself.

Demonstration of the ability to access jenarix objects and invoke the jenarix code interpreter from a graphical context, specifically Qt, is available in trunk/src/libjx/test/gui.

Demonstrations of much of the ability of jenarix is in other input scripts contained in trunk/src/libjx/test.


JENARIX NETWORK

Informal definition of the Jenarix Network Language is available from a combination of (1) the lemon input defining the parser's behavior (see trunk/src/libjx/src/net/jx_net_parse.lem), and (2) the example jenarix network input script net01.jxn (see trunk/src/libjx/test/net01.jxn).

The Jenarix Network Language supports the efficient description of a dataflow graph where named nodes have one or more input ports and one or more output ports where output ports of one node are connected to input ports of other nodes, giving rise to a graph of connected nodes.  The Jenarix Network Language currently does not support a direct means for specifying the computational elements to nodes; that is, when data is passed to a node, it presumably does something to that data before passing on something to another node in the graph and that "computational" step where it does something must be implemented in another language and input.  Instead, the Jenarix Network Language supports the importing of external code implementing these computational methods but at present, the Jenarix language does not yet support such an "import" action and hence the Network language does not have a working "import" command either.  (See lines containing the "import" directive near the beginning of the net01.jxn file.)

The jxn parser implements processing of the Jenarix Network Language as follows:  Each node seen on input results in the creation of a new jenarix entity.  Within that entity, an __init__() function is composed to construct connections between nodes at the time of instantiation of the entity.  In particular, a predefined function named "port" is invoked once for each of the named ports.  Related, a predefined function named "pipe" is invoked once for each pair of connected ports.  (Note that the Jenarix Network Language supports specification of pipes such as "input | symbol_A | symbol_B | output" which should result in 3 invocations of the "pipe" function here.)  In addition to the creation of the network connections at instantiation time, the __init__() function also serves to make local copies of any other objects specified in the input.  The copying of nodes or deriving new nodes from existing ones directly follows from the supported concepts of making copies of instantiated jenarix entities or deriving new entities from existing ones.

Major outstanding items not yet implemented:
1) The intended __init__() function produced by the current jxn parser has not been properly hooked up as the entity __init__() function.
2) A base entity definition from which all new nodes (their entities, rather) are derived has not been implemented, with supporting functions for "port" and "pipe" implemented.  Base entity would be something close to:  [ Network [] {ports : [], pipes : [], subnodes_code : []} ].
3) A framework for invoking the simple FIFO scheduler and pointing it to the available graphs has not been implemented.
4) An "import" statement is not yet supported.

Other ideas that seem worth seeing implemented:
1) A couple of common, utility nodes be pre-defined for purposes such as concat-to-a-file, get-line-of-input-from-stdin, etc.
2) An example utility node that takes a string as initialization input and then does eval() of it as its computational implementation.
