# Jenarix functions statically close on free variables in the
# surrounding scope by making deep copies 

# Entities referenced in the function are closed upon as well,
# including the method definitions

(def vector.add [v1 v2] [
  [(v1 0)
    (map (lambda [x y] (add x y)) (v1 1) (v2 1)) ]
  ]);

(impl vector.add)

(symbols);

(entity VectorBase null null {add:vector.add})

(entity Vector VectorBase null null);

# defining a Vector inside the function is sufficient 
# to create the closure

(def myfn [a,b] ([Vector], (a add b)));

# notice how the Vector definition is in the function's implementation

(impl myfn);

# if we create some vector instances

(set v1 [Vector, [1 2 3]]);

(set v2 [Vector, [2,3,4]]);

# both the function and the local entity methods work on them

(myfn v1 v2);

(v1 add v2);

# strictly speaking however, we can instead rely upon dynamic
# referencing of the class at the point of method invocation

(def myfn2 [a,b] [(a add b)])

(impl myfn2);

(myfn2 v1 v2);

# but that only works if the class is present and bound in the caller's namespace

# if we've nuked it

(entity Vector)

(symbols)

# then that doesn't work

(myfn2 v1 v2)

# whereas the function with closed entity definitions still works

(myfn v1 v2)




